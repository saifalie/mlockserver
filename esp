#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>

// WiFi credentials
const char* ssid = "BuckBeak";  // Your WiFi SSID
const char* password = "Hagrid45";  // Your WiFi Password

// MQTT Broker details
const char* mqtt_server = "f5d725c22de443d28542a36506b7fd33.s1.eu.hivemq.cloud";
const int mqtt_port = 8883;  // Secure TLS Port
const char* mqtt_user = "Jayesh";
const char* mqtt_password = "Jayesh_001";

// Define relay and IR sensor pins
#define RELAY1_PIN D1  // First relay on D1
#define RELAY2_PIN D3  // Second relay on D3
#define IR1_PIN D2     // First IR sensor on D2
#define IR2_PIN D4     // Second IR sensor on D4

// Track last known IR sensor states to prevent duplicate MQTT messages
bool lastIR1State = HIGH;  // Assuming HIGH means no object
bool lastIR2State = HIGH;

WiFiClientSecure espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);
  Serial.println("\nConnecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);

  // Control Relays based on received messages
  if (String(topic) == "esp8266/relay1") {
    if (message == "ON") {
      digitalWrite(RELAY1_PIN, LOW);  // Relay ON (Active LOW)
      Serial.println("Relay1 TURNED ON");
    } else if (message == "OFF") {
      digitalWrite(RELAY1_PIN, HIGH); // Relay OFF
      Serial.println("Relay1 TURNED OFF");
    }
  }

  if (String(topic) == "esp8266/relay2") {
    if (message == "ON") {
      digitalWrite(RELAY2_PIN, LOW);  // Relay ON
      Serial.println("Relay2 TURNED ON");
    } else if (message == "OFF") {
      digitalWrite(RELAY2_PIN, HIGH); // Relay OFF
      Serial.println("Relay2 TURNED OFF");
    }
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP8266Client", mqtt_user, mqtt_password)) {
      Serial.println("connected!");
      client.subscribe("esp8266/relay1");  // Subscribe to Relay1 topic
      client.subscribe("esp8266/relay2");  // Subscribe to Relay2 topic
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Trying again in 5 seconds...");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  
  // Setup relay pins
  pinMode(RELAY1_PIN, OUTPUT);
  pinMode(RELAY2_PIN, OUTPUT);
  digitalWrite(RELAY1_PIN, HIGH);  // Relays OFF initially
  digitalWrite(RELAY2_PIN, HIGH);

  // Setup IR sensor pins
  pinMode(IR1_PIN, INPUT);
  pinMode(IR2_PIN, INPUT);

  setup_wifi();
  espClient.setInsecure();  // Allow insecure connections for testing
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Read IR sensor states
  bool currentIR1State = digitalRead(IR1_PIN);
  bool currentIR2State = digitalRead(IR2_PIN);

  // Send update only if IR1 state changes
  if (currentIR1State != lastIR1State) {
    lastIR1State = currentIR1State;
    String ir1Message = (currentIR1State == LOW) ? "CLOSE" : "OPEN";
    client.publish("esp8266/ir1", ir1Message.c_str());
    Serial.print("IR1 State: ");
    Serial.println(ir1Message);
  }

  // Send update only if IR2 state changes
  if (currentIR2State != lastIR2State) {
    lastIR2State = currentIR2State;
    String ir2Message = (currentIR2State == LOW) ? "CLOSE" : "OPEN";
    client.publish("esp8266/ir2", ir2Message.c_str());
    Serial.print("IR2 State: ");
    Serial.println(ir2Message);
  }

  delay(100);  // Small delay to avoid rapid state changes
}